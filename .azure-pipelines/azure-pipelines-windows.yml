variables:
  Agent.Source.Git.ShallowFetchDepth: 1

trigger:
- master

jobs:

# This job build the wheels using Windows 2012- vs 2015
- job: Build
  pool:
    vmImage: 'vs2015-win2012r2'

  steps:

  - powershell: |
      (New-Object System.Net.WebClient).DownloadFile("https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe",".\Miniconda3.exe")
    displayName: Download Miniconda

  - script: start /wait "" Miniconda3.exe /InstallationType=JustMe /RegisterPython=0 /S /D=$(Agent.BuildDirectory)\CONDA
    displayName: Install Miniconda

  - script: |
      call $(Agent.BuildDirectory)\CONDA\Scripts\activate
      conda env create -f environment_win.yml
    displayName: Create Conda environment
  - script: |
      call $(Agent.BuildDirectory)\CONDA\Scripts\activate simnibs_env
      python setup.py bdist_wheel
      copy dist\* $(Build.ArtifactStagingDirectory)
      copy environment_win.yml $(Build.ArtifactStagingDirectory)
    displayName: Build SimNIBS
  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: windows_wheel
    displayName: Publish Artifact

# Now we test the previously build wheels on different windows versions

- job: Test
  dependsOn: Build
  strategy:
    matrix:
      Windows-2012:
        vmImage: 'vs2015-win2012r2'
      Windows-2016:
        vmImage: 'vs2017-win2016'
      Windows-2019:
         vmImage: 'windows-2019'

  pool:
    vmImage: $(vmImage)
    maxParallel: 4

  steps:

  - powershell: |
      (New-Object System.Net.WebClient).DownloadFile("https://repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe",".\Miniconda3.exe")
    displayName: Download Miniconda

  - script: start /wait "" Miniconda3.exe /InstallationType=JustMe /RegisterPython=0 /S /D=$(Agent.BuildDirectory)\CONDA
    displayName: Install Miniconda

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'windows_wheel'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: Download Wheel

  - script: call $(Agent.BuildDirectory)\CONDA\Scripts\activate & conda-env create --quiet --file environment_win.yml
    displayName: Create Anaconda environment

  - script: |
      call $(Agent.BuildDirectory)\CONDA\Scripts\activate simnibs_env
      pip install -f file://$(System.ArtifactsDirectory)\windows_wheel simnibs
      pytest simnibs\tests --junit-xml=test-results.xml
    displayName: Install SimNIBS and run unit tests

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFiles: 'test-results.xml'
      testRunTitle: 'Publish test results'

# Finally, if everything went fine, we upload to GitHub releases as a draft

- job: Release
  dependsOn: Test
  pool:
    vmImage: 'vs2015-win2012r2'

  steps:

  - task: DownloadBuildArtifacts@0
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'windows_wheel'
      downloadPath: '$(System.ArtifactsDirectory)'
    displayName: Download Wheel

  - task: GithubRelease@0
    displayName: Edit GitHub Release
    inputs: 
      gitHubConnection: guilhermebs # I use my connection because github does not generate OAuth token for organizations
      repositoryName: simnibs/simnibs
      action: edit
      tag: dev
      assets: $(System.ArtifactsDirectory)\windows_wheel\*
      assetUploadMode: 'replace'
      isDraft: true


